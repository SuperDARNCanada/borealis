syntax = "proto3";

package datawritemetadata;

message IntegrationTimeMetadata {
  int64 experiment_id = 1;
  string experiment_name = 2;
  string experiment_comment = 3;
  float rx_center_freq = 4; // kHz
  repeated SequenceType sequences = 5;
  uint32 num_sequences = 6;
  uint32 last_seqn_num = 7;
  bool scan_flag  = 8;
  double integration_time  = 9;
  double output_sample_rate = 10;
  double data_normalization_factor = 11; // to give filter scaling factors in data output.
  string scheduling_mode = 12; 

  message SequenceType {
    repeated RXChan rxchannel = 1;
    repeated uint32 blanks = 2;
    TXDebugData tx_data = 3;

    message RXChan {
      uint32 slice_id = 1;
      string slice_comment = 2;
      string interfacing = 3;
      bool rx_only = 4;
      uint32 pulse_len = 5;
      uint32 tau_spacing = 6;
      float rxfreq = 7;
      PulseTable ptab = 8;
      repeated SequenceEncoding sequence_encodings = 9; //repeated val for each sequence.
      repeated uint32 rx_main_antennas = 10; // Main antennas received on for experiment slice.
      repeated uint32 rx_intf_antennas = 11;
      repeated Beam beams = 12;
      bool acf = 13;
      bool xcf = 14;
      bool acfint = 15;
      float first_range = 16;
      uint32 num_ranges = 17;
      float range_sep = 18;
      LagTable ltab = 19;
      string averaging_method = 20;
      string slice_interfacing = 21;

      message PulseTable {  // length = length of sequence
        repeated uint32 pulse_position = 1;
      }

      message SequenceEncoding {
        repeated float encoding_value = 1; // num_pulses x encoding length (1 OR num_samps)
      }

      message Beam {
        uint32 beamnum = 1;  // no channel phase data because beamforming already occurred
        double beamazimuth = 2;
      }

      message LagTable {
        repeated Lag lag = 1;

        message Lag { // each Lag must have 2 pulse positions
          repeated uint32 pulse_position = 1;
          uint32 lag_num = 2;
        }
      }
    }

    message TXDebugData {
      float txrate = 1;
      float txctrfreq = 2;
      repeated uint32 pulse_timing_us = 3;
      repeated uint32 pulse_sample_start = 4;
      repeated SamplesBuffer tx_samples = 5;
      uint32 dmrate = 6;
      repeated SamplesBuffer decimated_tx_samples = 7;

      message SamplesBuffer {
        repeated double real = 1;
        repeated double imag = 2;
        uint32 tx_antenna_number = 3;
      }
    }
  }
}
