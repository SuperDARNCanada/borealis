/*
Copyright 2016 SuperDARN

See LICENSE for details.

  @file usrp.hpp
  This file contains class declarations for ease of use of USRP related features.

*/
#ifndef USRP_H
#define USRP_H

#include <uhd/usrp/multi_usrp.hpp>
#include "utils/driver_options/driveroptions.hpp"


/**
 * @brief      Contains an abstract wrapper for the USRP object.
 */
class USRP{
  public:
    explicit USRP(const DriverOptions& driver_options);
    void set_usrp_clock_source(std::string source);
    void set_tx_subdev(std::string tx_subdev);
    double set_tx_rate(double tx_rate, std::vector<size_t> chs);
    double get_tx_rate(uint32_t channel=0);
    double set_tx_center_freq(double freq, std::vector<size_t> chs);
    void set_main_rx_subdev(std::string main_subdev);
    void set_interferometer_rx_subdev(std::string interferometer_subdev,
                                        uint32_t interferometer_antenna_count);
    double set_rx_rate(double rx_rate, std::vector<size_t> rx_chs);
    double set_rx_center_freq(double freq, std::vector<size_t> chs);
    void set_time_source(std::string source);
    void check_ref_locked();
    void set_scope_sync(uhd::time_spec_t scope_high);
    void set_atten(uhd::time_spec_t atten_high);
    void set_tr(uhd::time_spec_t tr_high);
    void clear_scope_sync(uhd::time_spec_t scope_low);
    void clear_atten(uhd::time_spec_t atten_low);
    void clear_tr(uhd::time_spec_t tr_low);
    void clear_command_times();
    uhd::time_spec_t get_current_usrp_time();
    uhd::rx_streamer::sptr get_usrp_rx_stream(uhd::stream_args_t stream_args);
    uhd::tx_streamer::sptr get_usrp_tx_stream(uhd::stream_args_t stream_args);
    uhd::usrp::multi_usrp::sptr get_usrp();
    std::string to_string(std::vector<size_t> tx_chs, std::vector<size_t> rx_chs);

  private:
    //! A shared pointer to a new multi-USRP device.
    uhd::usrp::multi_usrp::sptr usrp_;

    //! A string representing what GPIO bank to use on the USRPs.
    std::string gpio_bank_;

    //! The motherboard for which to use GPIOs for high speed I/O.
    uint32_t mboard_;

    //! The bitmask to use for the scope sync GPIO.
    uint32_t scope_sync_mask_;

    //! The bitmask to use for the attenuator GPIO.
    uint32_t atten_mask_;

    //! The bitmask to use for the TR GPIO.
    uint32_t tr_mask_;

    void set_atr_gpios();

};

/**
 * @brief      Wrapper for the USRP TX metadata object.
 *
 * Used to hold and initialize a new tx_metadata_t object. Creates getters and setters to access
 * properties.
 */
class TXMetadata{
  public:
    TXMetadata();
    uhd::tx_metadata_t get_md();
    void set_start_of_burst(bool start_of_burst);
    void set_end_of_burst(bool end_of_burst);
    void set_has_time_spec(bool has_time_spec);
    void set_time_spec(uhd::time_spec_t time_spec);

  private:
    //! A raw USRP TX metadata object.
    uhd::tx_metadata_t md_;


};

/**
 * @brief      Wrapper for the USRP RX metadata object.
 *
 * Used to hold and initialize a new tx_metadata_t object. Creates getters and setters to access
 * properties.
 */
class RXMetadata{
  public:
    RXMetadata() = default;  // Blank ctor generated by compiler
    uhd::rx_metadata_t& get_md();
    bool get_end_of_burst();
    uhd::rx_metadata_t::error_code_t get_error_code();
    size_t get_fragment_offset();
    bool get_has_time_spec();
    bool get_out_of_sequence();
    bool get_start_of_burst();
    uhd::time_spec_t get_time_spec(); // REVIEW #6 TODO: add getter for more_fragments boolean
                                      // REPLY can discuss.
  private:
    //! A raw USRP RX metadata object.
    uhd::rx_metadata_t md_;
};

#endif

